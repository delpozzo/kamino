#!/bin/bash

###########################################################################
#          Title: Kamino: Deploy Image - Multi
#         Author: Mike Del Pozzo
#    Description: This script will deploy the selected image to multiple
#                 target drives simultaneously.
#        Version: 1.0.0
#           Date: 16 January 2019
#        Website: https://github.com/delpozzo/kamino
#        License: GPLv3 (see LICENSE)
#
#    Kamino Copyright (C) 2019 Mike Del Pozzo
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    any later version.
###########################################################################

declare -a targetDriveArray
imageFile=''
fileExtension='.img.gz'
scriptDir="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null && pwd)"
kaminoConfig="$scriptDir/../kamino.config"
imageDir=$(grep 'images_directory' $kaminoConfig | cut -d ' ' -f2)
blockSize=$(grep 'block_size' $kaminoConfig | cut -d ' ' -f2)
tmpDir=$(grep 'tmp_directory' $kaminoConfig | cut -d ' ' -f2)
tmpPID="$tmpDir/deployImage-$(cat /dev/urandom  |tr -dc 'a-zA-Z0-9' |fold -w 8 |head -n1).pid"
integrityFail='true'
protectRootFilesystem=$(grep 'protect_root_filesystem' $kaminoConfig | cut -d ' ' -f2)
if [ "$protectRootFilesystem" = 'no' ]; then 
  rootPartition=/dev/null
else
  rootPartition=$(mount |grep 'on / type' |grep -o 'sd[a-z]')
fi

RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;36m'
NOCOLOR='\033[0m'

###########################################################################

displaySplash() {
  echo ''
  echo ' K A M I N O    [ver. 1.0.0]'
  echo ' ------------------------------------'
  echo ' D E P L O Y  I M A G E  -  M U L T I'
  echo ''
}

###########################################################################

getDriveInfo() {
  local driveSectors=$(cat /sys/block/$1/size | awk '{$1=$1};1')
  local sectorSize=$(cat /sys/block/$1/queue/hw_sector_size | awk '{$1=$1};1')
  local driveVendor=$(cat /sys/block/$1/device/vendor | awk '{$1=$1};1')
  local driveModel=$(cat /sys/block/$1/device/model | awk '{$1=$1};1')
  local driveSize=$(awk -v var1="$driveSectors" -v var2="$sectorSize" 'BEGIN {print var1*var2/1000000000}')

  echo  "/dev/$1  $driveSize GB  $driveVendor $driveModel"
}

###########################################################################

containsElement() {
  local e match="$1"
  shift
  for e; do [[ "$e" == "$match" ]] && return 0; done
  return 1
}

###########################################################################

verifyChecksum() {
  echo -e "${GREEN}!!!INFO!!!${NOCOLOR} Verifying sha256sum for ${BLUE}$imageFile${NOCOLOR}"
  echo '           This may take a while depending on the size of the image...'
  echo ''

  cd $imageDir > /dev/null 2>&1
  sha256sum -c $imageFile.sha256 > /dev/null 2>&1

  if [ $? -eq 0 ]; then
    echo '----------------------------------------------------------------'
    cat $imageFile.sha256 |cut -d " " -f1
    echo '----------------------------------------------------------------'
    echo ''
    echo -e "${GREEN}!!!INFO!!!${NOCOLOR} Integrity check passed."
    integrityFail='false'
  else
    integrityFail='true'
    echo -e "${RED}!!!WARNING!!!${NOCOLOR} Integrity check failed. This image cannot be deployed."
  fi
}

###########################################################################

deployImage() {
  local ddCommand="gunzip -c $imageFile | tee"
  local userInput

  for ((i=0; i<${#targetDriveArray[@]}; i++))
  do
    if [ $(($i+1)) = ${#targetDriveArray[@]} ]; then
      ddCommand="${ddCommand} | dd of=/dev/${targetDriveArray[i]} bs=$blockSize"
    else
      ddCommand="${ddCommand} >(dd of=/dev/${targetDriveArray[i]} bs=$blockSize)"
    fi
  done

  while true; do
    clear
    displaySplash

    verifyChecksum

    if [ "$integrityFail" = 'true' ]; then
      echo ''
      echo 'Press enter to return to the image selection menu.'
      read userInput
      unset targetDriveArray
      declare -a targetDriveArray
      imageFile=''
      clear
      return
    fi

    echo ''
    echo -e "You've selected to deploy the image ${BLUE}$imageFile${NOCOLOR}"
    echo -e "to ${BLUE}multiple drives${NOCOLOR} with the following command:"
    echo ''
    echo "  $ddCommand"
    echo ''
    echo -e "${RED}!!!WARNING!!!${NOCOLOR} Data on the target drives will be overwritten with the contents of the image file."
    echo ''
    echo 'Do you wish to proceed?'
    echo ''
    echo -e ' [ Y ]\tYes'
    echo -e ' [ N ]\tNo'
    echo -e ' [ Q ]\tExit to Main Menu'

    echo ''
    echo 'Enter selection: '

    read userInput

    if [ "$userInput" = 'q' ] || [ "$userInput" = 'Q' ]; then
      clear
      echo ''
      echo 'Exiting Deploy Image...'
      echo ''
      exit 1

    elif [ "$userInput" = 'n' ] || [ "$userInput" = 'N' ]; then
      unset targetDriveArray
      declare -a targetDriveArray
      imageFile=''
      clear
      return

    elif [ "$userInput" = 'y' ] || [ "$userInput" = 'Y' ]; then

      bash -c "$ddCommand & ps -C dd -o pid= > $tmpPID"

      while true; do
        clear
        displaySplash

        echo "  $ddCommand"
        echo ''
        echo -e "${GREEN}!!!INFO!!!${NOCOLOR} Image deploy is now in progress. This may take a while..."
        echo ''

        kill -s USR1 $(cat $tmpPID) > /dev/null 2>&1

        if [ $? -ne 0 ]; then
          rm -f $tmpPID > /dev/null 2>&1
          break
        fi

        sleep 3
      done

      sync

      echo ''
      echo -e "${GREEN}!!!INFO!!!${NOCOLOR} Image deploy complete. Press enter to return to main menu..."
      echo ''

      read userInput

      exit 0

    else
      echo ''
      echo 'Invalid selection, try again...'
      sleep 2
      continue
    fi
  done
}

###########################################################################

listDrives() {
  local userInput
  local userInputArray

  while true; do
    clear
    displaySplash

    IFS=$'\n'
    local driveArray=($(cat /proc/partitions |grep -o 'sd[a-z]' |grep -v "$rootPartition" |sort -u))
    unset IFS

    if [ ${#driveArray[@]} -gt 1 ]; then
      echo -e "Choose ${BLUE}two or more target drives${NOCOLOR} from the list below (comma-separated):"
      echo ''

      for ((i=0; i<${#driveArray[@]}; i++))
      do
        local driveInfo=$(getDriveInfo ${driveArray[i]})
        echo -e " [ $(($i+1)) ]\t$driveInfo"
      done

      echo ''
      echo 'Or select from the following options:'
      echo ''
      echo -e ' [ R ]\tRefresh Drive List'
      echo -e ' [ Q ]\tExit to Main Menu'

      echo ''
      echo 'Enter selection: '

      read userInput

      if [ "$userInput" = 'q' ] || [ "$userInput" = 'Q' ]; then
        clear
        echo ''
        echo 'Exiting Deploy Image...'
        echo ''
        exit 1

      elif [ "$userInput" = 'r' ] || [ "$userInput" = 'R' ]; then
        clear
        continue

      elif [[ "$userInput" =~ ^[0-9]{1}\,[0-9]{1}$ ]] || [[ "$userInput" =~ ^[0-9]{1}\,[0-9]{1}\,[0-9]{1}$ ]] || [[ "$userInput" =~ ^[0-9]{1}\,[0-9]{1}\,[0-9]{1}\,[0-9]{1}$ ]]; then
        IFS=','
        read -r -a userInputArray <<< "$userInput"
        unset IFS

        for item in "${userInputArray[@]}"
        do
          if [ "$item" -gt 0 -a "$item" -le ${#driveArray[@]} ]; then
              containsElement "${driveArray[$((item-1))]}" "${targetDriveArray[@]}"
              if [ $? -eq 1 ]; then
                targetDriveArray+=("${driveArray[$((item-1))]}")
                echo "Adding ${driveArray[$((item-1))]}"
              else
                echo 'Invalid selection, try again...'
                unset targetDriveArray
                declare -a targetDriveArray
                sleep 2
                break
              fi
          else
            echo 'Invalid selection, try again...'
            unset targetDriveArray
            declare -a targetDriveArray
            sleep 2
            break
          fi
        done

        if [ ${#targetDriveArray[@]} -gt 1 ]; then
          deployImage
          break
        fi

      else
        echo ''
        echo 'Invalid selection, try again...'
        unset targetDriveArray
        declare -a targetDriveArray
        sleep 2
        continue
      fi

    else
      echo -e "Please attach ${BLUE}two or more${NOCOLOR} target drives to the system and try again."
      echo ''
      echo -e ' [ R ]\tRefresh Drive List'
      echo -e ' [ Q ]\tExit to Main Menu'

      echo ''
      echo 'Enter selection: '

      read userInput

      if [ "$userInput" = 'q' ] || [ "$userInput" = 'Q' ]; then
        clear
        echo ''
        echo 'Exiting Deploy Image...'
        echo ''
        exit 1

      elif [ "$userInput" = 'r' ] || [ "$userInput" = 'R' ]; then
        clear
        continue

      else
        echo ''
        echo 'Invalid selection, try again...'
        sleep 2
        continue
      fi
    fi
  done
}

###########################################################################

listImages() {
  local userInput

  while true; do
    clear
    displaySplash

    IFS=$'\n'
    local imageArray=($(cd $imageDir 2>/dev/null && ls -d *$fileExtension 2>/dev/null |sort -r -u))
    unset IFS

    if [ ${#imageArray[@]} -gt 0 ]; then
      echo -e "Choose a ${BLUE}source image${NOCOLOR} from the list below:"
      echo ''

      for ((i=0; i<${#imageArray[@]}; i++))
      do
        echo -e " [ $(($i+1)) ]\t${imageArray[i]}"
      done

      echo ''
      echo ' Or select from the following options:'
      echo ''
      echo -e ' [ R ]\tRefresh Image List'
      echo -e ' [ Q ]\tExit to Main Menu'
      echo ''
      echo 'Enter selection: '

      read userInput

      if [ "$userInput" = 'q' ] || [ "$userInput" = 'Q' ]; then
        clear
        echo ''
        echo 'Exiting Deploy Image...'
        echo ''
        exit 1

      elif [ "$userInput" = 'r' ] || [ "$userInput" = 'R' ]; then
        clear
        continue

      elif [[ "$userInput" =~ ^[0-9]+$ ]] && [ "$userInput" -ge 1 -a "$userInput" -le ${#imageArray[@]} ]; then
        imageFile="$imageDir/${imageArray[$((userInput-1))]}"
        listDrives

      else
        echo ''
        echo 'Invalid selection, try again...'
        sleep 2
        continue
      fi

    else
      echo -e "No image files have been discovered in ${BLUE}$imageDir${NOCOLOR}"
      echo ''
      echo -e ' [ R ]\tRefresh Image List'
      echo -e ' [ Q ]\tExit to Main Menu'
      echo ''
      echo 'Enter selection: '

      read userInput

      if [ "$userInput" = 'q' ] || [ "$userInput" = 'Q' ]; then
        clear
        echo ''
        echo 'Exiting Deploy Image...'
        echo ''
        exit 1

      elif [ "$userInput" = 'r' ] || [ "$userInput" = 'R' ]; then
        clear
        continue

      else
        echo ''
        echo 'Invalid selection, try again...'
        sleep 2
        continue
      fi
    fi
  done
}

###########################################################################

if [ "$(id -u)" != 0 ]; then
  echo 'This script must be run with sudo or as root!'
  exit 1
fi

clear
listImages
