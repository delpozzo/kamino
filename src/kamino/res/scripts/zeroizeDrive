#!/bin/bash

###########################################################################
#          Title: Kamino: Zeroize Drive
#         Author: Mike Del Pozzo
#    Description: This script will wipe the target drive by filling it
#                 with zeroes.
#        Version: 1.0.1
#           Date: 03 April 2019
#        Website: https://github.com/delpozzo/kamino
#        License: GPLv3 (see LICENSE)
#
#    Kamino Copyright (C) 2019 Mike Del Pozzo
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    any later version.
###########################################################################

targetDrive=''
scriptDir="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null && pwd)"
kaminoConfig="$scriptDir/../kamino.config"
blockSize=$(grep 'block_size' $kaminoConfig | cut -d ' ' -f2)
tmpDir=$(grep 'tmp_directory' $kaminoConfig | cut -d ' ' -f2)
tmpPID="$tmpDir/zeroizeDrive-$(cat /dev/urandom  |tr -dc 'a-zA-Z0-9' |fold -w 8 |head -n1).pid"

RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;36m'
NOCOLOR='\033[0m'

###########################################################################

displaySplash() {
  echo ''
  echo ' K A M I N O    [ver. 1.0.1]'
  echo ' ---------------------------'
  echo ' Z E R O I Z E   D R I V E'
  echo ''
}

###########################################################################

getDriveInfo() {
  local driveSectors=$(cat /sys/block/$1/size | awk '{$1=$1};1')
  local sectorSize=$(cat /sys/block/$1/queue/hw_sector_size | awk '{$1=$1};1')
  local driveVendor=$(cat /sys/block/$1/device/vendor | awk '{$1=$1};1')
  local driveModel=$(cat /sys/block/$1/device/model | awk '{$1=$1};1')
  local driveSize=$(awk -v var1="$driveSectors" -v var2="$sectorSize" 'BEGIN {print var1*var2/1000000000}')

  echo  "/dev/$1  $driveSize GB  $driveVendor $driveModel"
}

###########################################################################

zeroizeDrive() {
  local ddCommand="dd if=/dev/zero of=$targetDrive bs=$blockSize conv=noerror,sync"
  local userInput

  while true; do
    clear
    displaySplash

    echo -e "You've selected to zeroize ${BLUE}$targetDrive${NOCOLOR} with the following command:"
    echo ''
    echo "  $ddCommand"
    echo ''
    echo -e "${RED}!!!WARNING!!!${NOCOLOR} All data on ${BLUE}$targetDrive${NOCOLOR} will be wiped and lost forever."
    echo ''
    echo 'Do you wish to proceed?'
    echo ''
    echo -e ' [ Y ]\tYes'
    echo -e ' [ N ]\tNo'
    echo -e ' [ Q ]\tExit to Main Menu'

    echo ''
    echo 'Enter selection: '

    read userInput

    if [ "$userInput" = 'q' ] || [ "$userInput" = 'Q' ]; then
      clear
      echo ''
      echo 'Exiting Zeroize Drive...'
      echo ''
      exit 1

    elif [ "$userInput" = 'n' ] || [ "$userInput" = 'N' ]; then
      targetDrive=''
      clear
      return

    elif [ "$userInput" = 'y' ] || [ "$userInput" = 'Y' ]; then

     echo ''
     echo -e "${GREEN}!!!INFO!!!${NOCOLOR} Waking up $targetDrive"
     dd if=$targetDrive of=/dev/null count=512 > /dev/null 2>&1
     sleep 3

     bash -c "$ddCommand & ps -C dd -o pid= > $tmpPID"

      while true; do
        clear
        displaySplash

        echo "  $ddCommand"
        echo ''
        echo -e "${GREEN}!!!INFO!!!${NOCOLOR} Data wipe is now in progress. This may take a while..."
        echo ''

        kill -s USR1 $(cat $tmpPID) > /dev/null 2>&1

        if [ $? -ne 0 ]; then
          rm -f $tmpPID > /dev/null 2>&1
          break
        fi

        sleep 3
      done

      sync

      echo ''
      echo -e "${GREEN}!!!INFO!!!${NOCOLOR} Data wipe complete. Press enter to return to main menu..."
      echo ''
      read userInput

      exit 0

    else
      echo ''
      echo 'Invalid selection, try again...'
      sleep 2
      continue
    fi
  done
}

###########################################################################

listDrives() {
  local userInput

  while true; do
    clear
    displaySplash

    IFS=$'\n'
    local driveArray=($(cat /proc/partitions |grep -o 'sd[a-z]' |sort -u))
    unset IFS

    if [ ${#driveArray[@]} -gt 0 ]; then
      echo 'Choose a drive to wipe from the list below:'
      echo ''

      for ((i=0; i<${#driveArray[@]}; i++))
      do
        local driveInfo=$(getDriveInfo ${driveArray[i]})
        echo -e " [ $(($i+1)) ]\t$driveInfo"
      done

      echo ''
      echo 'Or select from the following options:'
      echo ''
      echo -e ' [ R ]\tRefresh Drive List'
      echo -e ' [ Q ]\tExit to Main Menu'

      echo ''
      echo 'Enter selection: '

      read userInput

      if [ "$userInput" = 'q' ] || [ "$userInput" = 'Q' ]; then
        clear
        echo ''
        echo 'Exiting Zeroize Drive...'
        echo ''
        exit 1

      elif [ "$userInput" = 'r' ] || [ "$userInput" = 'R' ]; then
        clear
        continue

      elif [[ "$userInput" =~ ^[0-9]+$ ]] && [ "$userInput" -ge 1 -a "$userInput" -le ${#driveArray[@]} ]; then
        targetDrive="/dev/${driveArray[$((userInput-1))]}"
        zeroizeDrive

      else
        echo ''
        echo 'Invalid selection, try again...'
        sleep 2
        continue
      fi

    else
      echo 'No drives have been discovered on this system. Please attach a drive and try again.'
      echo ''
      echo -e ' [ R ]\tRefresh Drive List'
      echo -e ' [ Q ]\tExit to Main Menu'

      echo ''
      echo 'Enter selection: '

      read userInput

      if [ "$userInput" = 'q' ] || [ "$userInput" = 'Q' ]; then
        clear
        echo ''
        echo 'Exiting Zeroize Drive...'
        echo ''
        exit 1

      elif [ "$userInput" = 'r' ] || [ "$userInput" = 'R' ]; then
        clear
        continue

      else
        echo ''
        echo 'Invalid selection, try again...'
        sleep 2
        continue
      fi
    fi
  done
}

###########################################################################

if [ "$(id -u)" != 0 ]; then
  echo 'This script must be run with sudo or as root!'
  exit 1
fi

clear
listDrives
